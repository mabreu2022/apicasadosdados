unit Unit1;

interface

uses
  Winapi.Windows,
  Winapi.Messages,
  System.SysUtils,
  System.Variants,
  System.Classes,
  Vcl.Graphics,
  Vcl.Controls,
  Vcl.Forms,
  Vcl.Dialogs,
  DataSet.Serialize,
  Data.DB,
  FireDAC.Stan.Intf,
  FireDAC.Stan.Option,
  FireDAC.Stan.Param,
  FireDAC.Stan.Error,
  FireDAC.DatS,
  FireDAC.Phys.Intf,
  FireDAC.DApt.Intf,
  FireDAC.Comp.DataSet,
  FireDAC.Comp.Client,
  Vcl.StdCtrls,
  Vcl.Grids,
  Vcl.DBGrids,
  RESTRequest4D,
  System.JSON,
  FireDac.Stan.Def,
  FireDAC.UI.Intf,
  FireDAC.Stan.Pool,
  FireDAC.Stan.Async,
  FireDAC.Phys,
  FireDAC.Phys.MySQL,
  FireDAC.Phys.MySQLDef,
  FireDAC.VCLUI.Wait,
  FireDAC.DApt,
  Unit2,
  IniFiles, Vcl.ExtCtrls;

type
  TForm1 = class(TForm)
    DBGrid1: TDBGrid;
    Memo1: TMemo;
    FDMemTable1: TFDMemTable;
    DataSource1: TDataSource;
    GroupBox1: TGroupBox;
    Panel1: TPanel;
    Edt_Estado: TEdit;
    Edt_Municipio: TEdit;
    Edt_Bairro: TEdit;
    Edt_CEP: TEdit;
    Lbl_Estado: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Button1: TButton;
    procedure FormCreate(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Button1Click(Sender: TObject);
  private
    { Private declarations }
    procedure CarregarJSONParaFDMemTable(const JSONString: string; MemTable: TFDMemTable);
    function FormatarJSON(const ADados: string): string;
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation


{$R *.dfm}

procedure TForm1.Button1Click(Sender: TObject);
var
  LResponse: IResponse;
  LJson: string;
begin
  Ljson:= TMyConst.JSON;

  LResponse :=
        TRequest.New.BaseURL('https://api.casadosdados.com.br/v2/public/cnpj/search')
        .Accept('application/json')
        .AddBody(FormatarJSON(Ljson))
        .Post;


   memo1.Lines.Add(FormatarJSON(LResponse.Content));
   memo1.Perform(WM_VSCROLL,SB_THUMBPOSITION,0);
   CarregarJSONParaFDMemTable(Memo1.Text, FDMemTable1);
end;

procedure TForm1.Button2Click(Sender: TObject);
begin
  FDMemTable1.LoadFromJSON(Memo1.Text);
end;

procedure TForm1.CarregarJSONParaFDMemTable(const JSONString: string;
  MemTable: TFDMemTable);
var
  JSONObject, DataObject: TJSONObject;
  CNPJsArray: TJSONArray;
  CNPJObject: TJSONObject;
  AtivPrin : TJSONObject;
  I: Integer;
  Qry: TFDquery;
  Connection: TFDConnection;
  Query: TFDQuery;
  ScriptFile: TStringList;
  OpenDialog: TOpenDialog;
  ScriptText: string;
  ScriptsPath: string;
  DatabaseName: string;
  IniFile: TIniFile;
begin
  // Limpa os dados existentes na FDMemTable
  MemTable.Close;
  MemTable.FieldDefs.Clear;


  // Adiciona os campos à FDMemTable
  MemTable.FieldDefs.Add('cnpj', ftString, 14);
  MemTable.FieldDefs.Add('cnpj_raiz', ftString, 8);
  MemTable.FieldDefs.Add('filial_numero', ftInteger);
  MemTable.FieldDefs.Add('razao_social', ftString, 100);
  MemTable.FieldDefs.Add('nome_fantasia', ftString, 100);
  MemTable.FieldDefs.Add('data_abertura', ftString);
  MemTable.FieldDefs.Add('situacao_cadastral', ftString, 50);
  MemTable.FieldDefs.Add('logradouro', ftString, 100);
  MemTable.FieldDefs.Add('numero', ftString, 10);
  MemTable.FieldDefs.Add('bairro', ftString, 50);
  MemTable.FieldDefs.Add('municipio', ftString, 50);
  MemTable.FieldDefs.Add('uf', ftString, 2);
  MemTable.FieldDefs.Add('atividade_codigo', ftString, 10);
  MemTable.FieldDefs.Add('atividade_descricao', ftString, 100);
  MemTable.FieldDefs.Add('cnpj_mei', ftBoolean);
  MemTable.FieldDefs.Add('versao', ftString, 10);

  // Cria os campos na FDMemTable
  MemTable.CreateDataSet;

  // Converte a string JSON para um objeto JSON
  JSONObject := TJSONObject.ParseJSONValue(JSONString) as TJSONObject;
  try
    // Obtém o objeto 'data' do JSON
    DataObject := JSONObject.GetValue('data') as TJSONObject;

    // Obtém o array 'cnpj' do objeto 'data'
    CNPJsArray := DataObject.GetValue('cnpj') as TJSONArray;

    // Itera sobre os objetos CNPJ no array
    for I := 0 to CNPJsArray.Count - 1 do
    begin
      // Obtém o objeto CNPJ
      CNPJObject := CNPJsArray.Items[I] as TJSONObject;

      // Adiciona os campos na FDMemTable e preenche os valores
      MemTable.Append;
      MemTable.FieldByName('cnpj').AsString               := CNPJObject.GetValue('cnpj').Value;
      MemTable.FieldByName('cnpj_raiz').AsString          := CNPJObject.GetValue('cnpj_raiz').Value;
      MemTable.FieldByName('filial_numero').AsInteger     := CNPJObject.GetValue<integer>('filial_numero');
      MemTable.FieldByName('razao_social').AsString       := CNPJObject.GetValue('razao_social').Value;
      MemTable.FieldByName('nome_fantasia').AsString      := CNPJObject.GetValue('nome_fantasia').Value;
      MemTable.FieldByName('data_abertura').AsString      := CNPJObject.GetValue('data_abertura').Value;
      MemTable.FieldByName('situacao_cadastral').AsString := CNPJObject.GetValue('situacao_cadastral').Value;
      MemTable.FieldByName('logradouro').AsString         := CNPJObject.GetValue('logradouro').Value;
      MemTable.FieldByName('numero').AsString             := CNPJObject.GetValue('numero').Value;
      MemTable.FieldByName('bairro').AsString             := CNPJObject.GetValue('bairro').Value;
      MemTable.FieldByName('municipio').AsString          := CNPJObject.GetValue('municipio').Value;
      MemTable.FieldByName('uf').AsString                 := CNPJObject.GetValue('uf').Value;

      AtivPrin:=  CNPJObject.GetValue<TJSONObject>('atividade_principal',nil);
      MemTable.FieldByName('atividade_codigo').AsString   := AtivPrin.GetValue('codigo').Value;
      MemTable.FieldByName('atividade_descricao').AsString:= AtivPrin.GetValue('descricao').Value;

      MemTable.FieldByName('cnpj_mei').AsBoolean          := CNPJObject.GetValue<boolean>('cnpj_mei');
      MemTable.FieldByName('versao').AsString             := CNPJObject.GetValue('versao').Value;

      // Posta os dados na FDMemTable
      MemTable.Post;

    end;
  finally
    // Libera o objeto JSON
    JSONObject.Free;

    //Gravar no Banco de dados
    Connection := TFDConnection.Create(nil);

    //Ideal Ler de um arquivo Ini para não ficar enjessado
    Connection.DriverName := 'MySQL'; // Driver do FireDAC para MySQL
    IniFile := TIniFile.Create(ExtractFilePath(Application.ExeName) +'\config.ini');
    try
      Connection.Params.Values['Server']    := IniFile.ReadString('MySQLConfig', 'Server', '');
      Connection.Params.Values['User_Name'] := IniFile.ReadString('MySQLConfig', 'User_Name', '');
      Connection.Params.Values['Password']  := IniFile.ReadString('MySQLConfig', 'Password', '');
      Connection.Params.Values['Database']  := IniFile.ReadString('MySQLConfig', 'Database', '');
    finally
      IniFile.Free;
    end;

    Connection.Connected := True;

    //Showmessage(IntToStr(MemTable.RecordCount));

    //Inicia a Transação com o banco
    try
      Connection.StartTransaction;

      MemTable.First;
      while not MemTable.Eof do
      begin
          Qry:= TFDQuery.Create(nil);
          Qry.Connection:= Connection;
          try
            Qry.SQL.Clear;
            Qry.SQL.Add('INSERT INTO clientes (' +
                        'cnpj, cnpj_raiz, filial_numero, razao_social, nome_fantasia, ' +
                        'data_abertura, situacao_cadastral, logradouro, numero, bairro, ' +
                        'municipio, uf, codigo, descricao, cnpj_mei, versao) ' +
                        'VALUES (:cnpj, :cnpj_raiz, :filial_numero, :razao_social, :nome_fantasia, ' +
                        ':data_abertura, :situacao_cadastral, :logradouro, :numero, :bairro, ' +
                        ':municipio, :uf, :codigo, :descricao, :cnpj_mei, :versao)');

            Qry.ParamByName('cnpj').AsString                := MemTable.FieldByName('cnpj').AsString;
            Qry.ParamByName('cnpj_raiz').AsString           := MemTable.FieldByName('cnpj_raiz').AsString;
            Qry.ParamByName('filial_numero').AsInteger      := MemTable.FieldByName('filial_numero').AsInteger;
            Qry.ParamByName('razao_social').AsString        := MemTable.FieldByName('razao_social').AsString;
            Qry.ParamByName('nome_fantasia').AsString       := MemTable.FieldByName('nome_fantasia').AsString;
            Qry.ParamByName('data_abertura').AsString       := MemTable.FieldByName('data_abertura').AsString;
            Qry.ParamByName('situacao_cadastral').AsString  := MemTable.FieldByName('situacao_cadastral').AsString;
            Qry.ParamByName('logradouro').AsString          := MemTable.FieldByName('logradouro').AsString;
            Qry.ParamByName('numero').AsString              := MemTable.FieldByName('numero').AsString;
            Qry.ParamByName('bairro').AsString              := MemTable.FieldByName('bairro').AsString;
            Qry.ParamByName('municipio').AsString           := MemTable.FieldByName('municipio').AsString;
            Qry.ParamByName('uf').AsString                  := MemTable.FieldByName('uf').AsString;
            Qry.ParamByName('codigo').AsString              := MemTable.FieldByName('atividade_codigo').AsString;
            Qry.ParamByName('descricao').AsString           := MemTable.FieldByName('atividade_descricao').AsString;
            Qry.ParamByName('cnpj_mei').AsBoolean           := MemTable.FieldByName('cnpj_mei').AsBoolean;
            Qry.ParamByName('versao').AsString              := MemTable.FieldByName('versao').AsString;

            Qry.ExecSQL;
            MemTable.Next;
          finally
            Qry.Free;
            Connection.Commit;
          end;

      end;
    Except  on E: Exception do
      begin
         Connection.Rollback;
         ShowMessage('Erro durante a transação: ' + E.Message);
      end;
    end;

  end;

end;

function TForm1.FormatarJSON(const ADados: string): string;
var
  LV: System.JSON.TJSONValue;
begin
  if ADados.Trim.IsEmpty then
    Exit;
  LV := System.JSON.TJSONObject.ParseJSONValue(ADados);
  if not Assigned(LV) then
    Exit(ADados);
  try
    Result := LV.Format();
  finally
    LV.Free;
  end;

end;

procedure TForm1.FormCreate(Sender: TObject);
begin
  //FDMemTable1.Open;
end;

end.
